{"version":3,"sources":["backTrackingAlgorithms/nQueensProblem/crown.png","utils/navbar.jsx","utils/indexTable.jsx","utils/randomIntFromInterval.js","sortingAlgorithms/complexityTable.jsx","sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/cellColors.js","utils/backbar.jsx","sortingAlgorithms/sortingVisualiser.jsx","utils/header.jsx","searchingAlgorithms/arrayTile.jsx","searchingAlgorithms/binarySearch/binarySearch.jsx","searchingAlgorithms/searchingAlgorithms.js","searchingAlgorithms/linearSearch/linearSearch.jsx","backTrackingAlgorithms/backTrackingAlgorithms.js","backTrackingAlgorithms/nQueensProblem/nQueensProblem.jsx","backTrackingAlgorithms/ratInAMaze/arrayofMazes.js","backTrackingAlgorithms/ratInAMaze/ratInAMaze.jsx","pathFinderVisualiser/Node/Node.jsx","pathFinderVisualiser/pathfinder-utils/arrayConversions.js","pathFinderVisualiser/pathFindingAlgorithms/dijkstra.js","pathFinderVisualiser/pathFindingAlgorithms/breadthFirstSearch.js","pathFinderVisualiser/pathFindingAlgorithms/depthFirstSearch.js","pathFinderVisualiser/pathFindingAlgorithms/astar.js","pathFinderVisualiser/pathFindingAlgorithms/bidirectionalSearch.js","pathFinderVisualiser/pathfinder-utils/highlightMazeNodes.js","pathFinderVisualiser/pathfinder-utils/legend.jsx","pathFinderVisualiser/pathfinder-utils/complexityTable.jsx","pathFinderVisualiser/pathfinderVisualiser.jsx","pathFinderVisualiser/generateMaze.js","App.js","index.js"],"names":["module","exports","NavBar","className","href","IndexTable","props","state","scope","to","React","Component","randomIntFromInterval","min","max","Math","floor","random","ComplexityTable","id","colSpan","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","i","j","push","doMerge","quickSortHelper","left","right","pivot","swap","buildMaxHeap","heapify","index","leftChild","righChild","heap","arr","temp","cellColors","BackBar","color","reverse","SortingVisualiser","disabled","this","resetArray","SIZE_OF_BOARD","val","setState","drawBoard","arrayBoard","document","getElementById","innerHTML","container","style","setProperty","cell","createElement","appendChild","cellStyle","backgroundColor","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","parseInt","value","alert","bubbleSort","selectionSort","insertionSort","quickSort","heapSort","mergeSort","speedFactor","setTimeout","arrayBlocks","getElementsByClassName","count","idxOne","idxTwo","elemOne","elemTwo","blockOne","blockTwo","blockOneStyle","blockTwoStyle","transition","classList","add","blockOneIdx","newColor","getQuickSortAnimations","items","visualiseAnimations","isSorted","counter","getBubbleSortAnimations","getInsertionSortAnimations","currentIdx","smallestIdx","getSelectionSortAnimations","lastElement","getHeapSortAnimations","onClick","defaultValue","selectAlgorithm","Header","title","ArrayTile","idx","type","BinarySearch","found","elementFoundAt","target","msgAfterExecution","previousLength","prevArray","remove","sortedArray","sort","a","b","start","end","arrayTiles","binarySearchAnimations","element","mid","resetAllTiles","console","log","hightlightWithinBounds","placeholder","binarySearch","map","key","LinearSearch","msg","ele","linearSearchAnimations","currentEle","arrayBar","arrayBarStyle","linearSearch","createBoard","size","board","getRowsOfZeroes","solveNQueenUtil","col","N","isSafe","row","isRatSafe","maze","x","y","mazeRows","mazeCols","solveRatInAMaze","sol","endOfMazeX","endOfMazeY","ANIMATION_SPEED_SECONDS","NQueensProblem","SIZE","padding","fontSize","item","crownsI","l","crown","resultsDiv","NQueensAnimations","getNQueensAnimations","isQueenSafe","prepend","trueValues","src","width","alt","readOnly","MAZES","MAZE","SOL","prepareSolutionBoardOfZeroes","RatInAMazeProblem","solveMaze","solution","blocks","rat","finalPath","blockStyle","ROWS","COLS","testAlgo","Node","isFinish","isStart","isWall","onNodeClick","onNodeOver","onNodeOut","extraClassName","onMouseOver","onMouseOut","convert1Dto2DArray","OneDArray","twoDArray","oneDRow","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","calculatePath","isVisited","updateUnvisitedNeighbors","nodeA","nodeB","node","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","shortestPathNodes","currentNode","unshift","getAllNeighbors","calculateCost","distanceType","sqrt","pow","abs","getNeighbors","getAdjacents","getNodeNeighbors","nodeArray","Legend","PathFinderVisualiser","modifyingNodeState","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","disableMazesButton","disableNodesButton","disableClearMazeButton","highlightMazeNodes","isGridDiagonalsHighlighted","speed","setUpGrid","gridBox","createNode","algorithm","visualiseAlgorithms","nodesInShortestPathOrder","d2Grid","STARTNODE","FINISHNODE","queue","bfs","closedlist","openlist","cost","F","G","H","current","nNode","includes","astar","squeue","dqueue","svisited","dvisited","currsn","currdn","sneighbors","dneighbors","sneighbor","dneighbor","sourcePaths","destPaths","sPathRow","splast","destPathRow","bidirectionalSearch","source_visited","dest_visited","sPathNodes","dPathNodes","animatePathBD","stack","pop","dfs","animatePath","nodeVal","nRow","nCol","highlightGrid","unHighlightGrid","highlightGridDiagonals","unHighlightGridDiagonals","NODE_ROW","NODE_COL","nodeType","newGrid","newNode","NODE_STATE","toggleStartOrFinish","toggleWall","STATE","TwoDArray","convert2Dto1DArray","ROW","COL","generate","height","generateMaze","animateShortestPath","unHighlightDiagonals","highlightDiagonals","handleNodeOperations","highlightNodes","unHighlightNodes","modifyNodeState","clearBoard","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.b9f4ad3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crown.684af6ea.png\";","import React from \"react\";\r\n\r\nconst NavBar = () => (\r\n    <div className=\"bg-dark py-2 px-2\">\r\n        <span>\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\r\n                href=\"https://github.com/dipeshpatil/algorithms-visualiser\"\r\n            >\r\n                <i className=\"fab text-light fa-github\"></i>\r\n                &nbsp; Repo URL\r\n            </a>\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\r\n                href=\"https://linkedin.com/in/dipesh-patil\"\r\n            >\r\n                <i className=\"fab text-light fa-linkedin\"></i>\r\n                &nbsp; Dipesh Patil\r\n            </a>\r\n        </span>\r\n    </div>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport \"./bootstrap.min.css\";\r\n\r\nexport default class IndexTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-2\">\r\n                <div className=\"text-center text-dark\">So Far Implemented</div>\r\n                <table className=\"table table-striped table-light mt-2\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Latest Visualiser</th>\r\n                            <th scope=\"col\">Category</th>\r\n                            <th scope=\"col\">URL</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Pathfinding Visualiser</td>\r\n                            <td>Pathfinding</td>\r\n                            <td>\r\n                                <NavLink to=\"/pathfinder\">\r\n                                    <code>/pathfinder</code>\r\n                                </NavLink>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Rat In A Maze</td>\r\n                            <td>Backtracking</td>\r\n                            <td>\r\n                                <NavLink to=\"/rat-in-a-maze\">\r\n                                    <code>/rat-in-a-maze</code>\r\n                                </NavLink>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Sorting Visualiser</td>\r\n                            <td>Sorting</td>\r\n                            <td>\r\n                                <NavLink to=\"/sorting\">\r\n                                    <code>/sorting</code>\r\n                                </NavLink>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>N Queens Problem</td>\r\n                            <td>Backtracking</td>\r\n                            <td>\r\n                                <NavLink to=\"/n-queens-problem\">\r\n                                    <code>/n-queens-problem</code>\r\n                                </NavLink>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Binary Search</td>\r\n                            <td>Searching</td>\r\n                            <td>\r\n                                <NavLink to=\"/binary-search\">\r\n                                    <code>/binary-search</code>\r\n                                </NavLink>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Linear Search</td>\r\n                            <td>Searching</td>\r\n                            <td>\r\n                                <NavLink to=\"/linear-search\">\r\n                                    <code>/linear-search</code>\r\n                                </NavLink>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"text-center text-muted\">\r\n                    Happy Visualisation Day!\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\r\n\r\nconst ComplexityTable = () => (\r\n    <div id=\"complexityTable\">\r\n        <table className=\"table-bordered table table-striped text-center rounded-b mt-2 shadowT table-light\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Algorithm</th>\r\n                    <th colSpan=\"2\">Time</th>\r\n                    <th>Space</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Case: </td>\r\n                    <td className=\"text-success table-success\">Best</td>\r\n                    <td className=\"text-danger table-danger\">Worst</td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Heap Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Merge Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Quick Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>Log N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Bubble Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Insertion Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Selection Sort</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default ComplexityTable;\r\n","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(\r\n        auxiliaryArray,\r\n        middleIdx + 1,\r\n        endIdx,\r\n        mainArray,\r\n        animations\r\n    );\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array = []) {\r\n    const animations = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; i++) {\r\n            if (array[i] > array[i + 1]) {\r\n                swap(i, i + 1, array);\r\n                isSorted = false;\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            } else {\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            }\r\n        }\r\n        counter++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array = []) {\r\n    const animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        let j = i;\r\n        while (j > 0 && array[j] < array[j - 1]) {\r\n            swap(j, j - 1, array);\r\n            animations.push([j, j - 1, array[j], array[j - 1]]);\r\n            j -= 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getSelectionSortAnimations(array = []) {\r\n    const animations = [];\r\n    let currentIdx = 0;\r\n    while (currentIdx < array.length - 1) {\r\n        let smallestIdx = currentIdx;\r\n        for (let i = currentIdx + 1; i < array.length; i++) {\r\n            if (array[smallestIdx] > array[i]) smallestIdx = i;\r\n        }\r\n        if (currentIdx < smallestIdx) {\r\n            swap(currentIdx, smallestIdx, array);\r\n            animations.push([\r\n                currentIdx,\r\n                smallestIdx,\r\n                array[currentIdx],\r\n                array[smallestIdx],\r\n            ]);\r\n        }\r\n        currentIdx++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array = [], left, right, animations = []) {\r\n    let pivot = array[Math.floor((right + left) / 2)],\r\n        i = left,\r\n        j = right;\r\n    while (i <= j) {\r\n        while (array[i] < pivot) i++;\r\n\r\n        while (array[j] > pivot) j--;\r\n\r\n        if (i <= j) {\r\n            swap(i, j, array);\r\n            animations.push([i, j, array[i++], array[j--]]);\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nexport function getQuickSortAnimations(\r\n    items = [],\r\n    left,\r\n    right,\r\n    animations = []\r\n) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = quickSortHelper(items, left, right, animations);\r\n        if (left < index - 1) {\r\n            getQuickSortAnimations(items, left, index - 1, animations);\r\n        }\r\n        if (index < right) {\r\n            getQuickSortAnimations(items, index, right, animations);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getHeapSortAnimations(array = [], animations = []) {\r\n    buildMaxHeap(array, animations);\r\n    let lastElement = array.length - 1;\r\n    while (lastElement > 0) {\r\n        swap(0, lastElement, array);\r\n        animations.push([0, lastElement, array[0], array[lastElement]]);\r\n        heapify(array, 0, lastElement, animations);\r\n        lastElement -= 1;\r\n    }\r\n}\r\n\r\nfunction buildMaxHeap(array = [], animations = []) {\r\n    let i;\r\n    i = array.length / 2 - 1;\r\n    i = Math.floor(i);\r\n    while (i >= 0) {\r\n        heapify(array, i, array.length, animations);\r\n        i -= 1;\r\n    }\r\n}\r\n\r\nfunction heapify(heap = [], i, max, animations = []) {\r\n    let index, leftChild, righChild;\r\n\r\n    while (i < max) {\r\n        index = i;\r\n        leftChild = 2 * i + 1;\r\n        righChild = leftChild + 1;\r\n\r\n        if (leftChild < max && heap[leftChild] > heap[index]) index = leftChild;\r\n\r\n        if (righChild < max && heap[righChild] > heap[index]) index = righChild;\r\n\r\n        if (index === i) return;\r\n\r\n        swap(i, index, heap);\r\n        animations.push([i, index, heap[i], heap[index]]);\r\n        i = index;\r\n    }\r\n}\r\n\r\nfunction swap(i, j, arr = []) {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n","const cellColors = [\r\n    [\r\n        \"#040C12\",\r\n        \"#081925\",\r\n        \"#0C2637\",\r\n        \"#10334A\",\r\n        \"#14405C\",\r\n        \"#184C6F\",\r\n        \"#1C5981\",\r\n        \"#206694\",\r\n        \"#2473A6\",\r\n        \"#2980B9\",\r\n        \"#3E8CC0\",\r\n        \"#5399C7\",\r\n        \"#69A6CE\",\r\n        \"#7EB2D5\",\r\n        \"#94BFDC\",\r\n        \"#A9CCE3\",\r\n        \"#BED8EA\",\r\n        \"#D4E5F1\",\r\n        \"#E9F2F8\",\r\n    ],\r\n    [\r\n        \"#180308\",\r\n        \"#300610\",\r\n        \"#480918\",\r\n        \"#600C21\",\r\n        \"#780F29\",\r\n        \"#901231\",\r\n        \"#A8153A\",\r\n        \"#C01842\",\r\n        \"#D81B4A\",\r\n        \"#F01F53\",\r\n        \"#F13564\",\r\n        \"#F34B75\",\r\n        \"#F46286\",\r\n        \"#F67897\",\r\n        \"#F78FA9\",\r\n        \"#F9A5BA\",\r\n        \"#FABBCB\",\r\n        \"#FCD2DC\",\r\n        \"#FDE8ED\",\r\n    ],\r\n    [\r\n        \"#180C03\",\r\n        \"#301906\",\r\n        \"#482609\",\r\n        \"#60330C\",\r\n        \"#78400F\",\r\n        \"#904D12\",\r\n        \"#A85A15\",\r\n        \"#C06718\",\r\n        \"#D8741B\",\r\n        \"#F0811F\",\r\n        \"#F18D35\",\r\n        \"#F39A4B\",\r\n        \"#F4A662\",\r\n        \"#F6B378\",\r\n        \"#F7C08F\",\r\n        \"#F9CCA5\",\r\n        \"#FAD9BB\",\r\n        \"#FCE5D2\",\r\n        \"#FDF2E8\",\r\n    ],\r\n    [\r\n        \"#0D0118\",\r\n        \"#1A0231\",\r\n        \"#27034A\",\r\n        \"#340463\",\r\n        \"#41067C\",\r\n        \"#4E0795\",\r\n        \"#5B08AE\",\r\n        \"#6809C7\",\r\n        \"#750AE0\",\r\n        \"#820CF9\",\r\n        \"#8E24F9\",\r\n        \"#9B3CFA\",\r\n        \"#A754FA\",\r\n        \"#B46DFB\",\r\n        \"#C085FC\",\r\n        \"#CD9DFC\",\r\n        \"#D9B6FD\",\r\n        \"#E6CEFD\",\r\n        \"#F2E6FE\",\r\n    ],\r\n];\r\n\r\nexport default cellColors;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst BackBar = () => (\r\n    <div className=\"bg-secondary py-2\">\r\n        <NavLink to=\"/\">\r\n            <span className=\"text-light ml-3\">\r\n                <i className=\"fas fa-arrow-left\"></i> Back\r\n            </span>\r\n        </NavLink>\r\n    </div>\r\n);\r\n\r\nexport default BackBar;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"../utils/randomIntFromInterval\";\r\nimport ComplexityTable from \"./complexityTable\";\r\nimport {\r\n    getMergeSortAnimations,\r\n    getBubbleSortAnimations,\r\n    getInsertionSortAnimations,\r\n    getSelectionSortAnimations,\r\n    getQuickSortAnimations,\r\n    getHeapSortAnimations,\r\n} from \"./sortingAlgorithms\";\r\n\r\nimport cellColors from \"./cellColors\";\r\n\r\n// Stylesheets\r\nimport \"./sortingVisualiser.css\";\r\n\r\nimport BackBar from \"./../utils/backbar\";\r\n\r\nvar SELECTED = randomIntFromInterval(0, cellColors.length - 1);\r\nconst color = cellColors[SELECTED].reverse();\r\n\r\nconst SIZE_OF_BOARD = 20; // Size of Board -> N x N Size of 1D Array\r\nvar ANIMATION_SPEED = 1; // Greater Value -> Slower Animation\r\nconst CELL_CORNER_BORDER_RADIUS = 3;\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < SIZE_OF_BOARD * SIZE_OF_BOARD; i++) {\r\n            let val = randomIntFromInterval(0, color.length - 1);\r\n            array.push(val);\r\n        }\r\n        this.setState({ array });\r\n        this.drawBoard(array);\r\n    }\r\n\r\n    drawBoard(arrayBoard = []) {\r\n        document.getElementById(\"sortingBoard\").innerHTML = \"\";\r\n        // creating the board\r\n        const container = document.getElementById(\"sortingBoard\");\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--grid-rows\", SIZE_OF_BOARD);\r\n        container.style.setProperty(\"--grid-cols\", SIZE_OF_BOARD);\r\n        // Adding cells to the board\r\n        for (let j = 0; j < arrayBoard.length; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            container.appendChild(cell).className = \"grid-item\";\r\n            let cellStyle = cell.style;\r\n            cellStyle.backgroundColor = color[arrayBoard[j]];\r\n\r\n            // styling the corners\r\n            if (j === 0) {\r\n                cellStyle.borderTopLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderTopRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderBottomRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * (SIZE_OF_BOARD - 1)) {\r\n                cellStyle.borderBottomLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        let selectedValue = parseInt(\r\n            document.getElementById(\"sortingAlgoDropDown\").value\r\n        );\r\n        switch (selectedValue) {\r\n            case 0:\r\n                alert(\"Select An Algorithm First!\");\r\n                break;\r\n            case 1:\r\n                this.bubbleSort();\r\n                break;\r\n            case 2:\r\n                this.selectionSort();\r\n                break;\r\n            case 3:\r\n                this.insertionSort();\r\n                break;\r\n            case 4:\r\n                this.quickSort();\r\n                break;\r\n            case 5:\r\n                this.heapSort();\r\n                break;\r\n            case 6:\r\n                this.mergeSort();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    visualiseAnimations(animations = [], speedFactor) {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            let count = 0;\r\n            for (let i = 0; i < animations.length; i++) {\r\n                const [idxOne, idxTwo, elemOne, elemTwo] = animations[i];\r\n                const blockOne = arrayBlocks[idxOne];\r\n                const blockTwo = arrayBlocks[idxTwo];\r\n                const blockOneStyle = blockOne.style;\r\n                const blockTwoStyle = blockTwo.style;\r\n\r\n                setTimeout(() => {\r\n                    blockOneStyle.backgroundColor = color[elemOne];\r\n                    blockTwoStyle.backgroundColor = color[elemTwo];\r\n\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                    blockTwoStyle.transition = \"150ms all\";\r\n                }, ANIMATION_SPEED * speedFactor * (i + 1));\r\n                count++;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * speedFactor * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    mergeSort() {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const animations = getMergeSortAnimations(this.state.array);\r\n            let count = 0;\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            for (let i = 0; i < animations.length; i++) {\r\n                setTimeout(() => {\r\n                    const [blockOneIdx, newColor] = animations[i];\r\n                    const blockOneStyle = arrayBlocks[blockOneIdx].style;\r\n                    blockOneStyle.backgroundColor = color[newColor];\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                }, i * ANIMATION_SPEED);\r\n                count++;\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = [];\r\n        getQuickSortAnimations(\r\n            this.state.array,\r\n            0,\r\n            this.state.array.length - 1,\r\n            animations\r\n        );\r\n        this.visualiseAnimations(animations, 3.5);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.4);\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.8);\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 50);\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = [];\r\n        getHeapSortAnimations(this.state.array, animations);\r\n        this.visualiseAnimations(animations, 2);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7\">\r\n                            <div\r\n                                className=\"box shadowT board\"\r\n                                id=\"sortingBoard\"\r\n                            ></div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 mt-1\">\r\n                            <div className=\"input-group mt-1\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <button\r\n                                        onClick={() => this.resetArray()}\r\n                                        className=\"btn btn-danger\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        New Array\r\n                                    </button>\r\n                                </div>\r\n                                <select\r\n                                    className=\"custom-select\"\r\n                                    id=\"sortingAlgoDropDown\"\r\n                                    disabled={disabled}\r\n                                    defaultValue=\"0\"\r\n                                >\r\n                                    <option disabled value=\"0\">\r\n                                        Algorithm\r\n                                    </option>\r\n                                    <option value=\"1\">Bubble Sort</option>\r\n                                    <option value=\"2\">Selection Sort</option>\r\n                                    <option value=\"3\">Insertion Sort</option>\r\n                                    <option value=\"4\">Quick Sort</option>\r\n                                    <option value=\"5\">Heap Sort</option>\r\n                                    <option value=\"6\">Merge Sort</option>\r\n                                </select>\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        onClick={() => this.selectAlgorithm()}\r\n                                        className=\"btn btn-success\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Visualize\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <ComplexityTable />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <div>\r\n        <h2 className=\"mt-3 text-center\" >{title}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst ArrayTile = ({ idx, val, type }) =>\r\n    type === \"binarySearch\" ? (\r\n        <div className=\"b-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    ) : (\r\n        <div className=\"l-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    );\r\n\r\nexport default ArrayTile;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { binarySearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\nimport BackBar from \"./../../utils/backbar\";\r\n\r\n//Stylesheets\r\nimport \"./binarySearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 3;\r\n\r\nexport default class BinarySearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: null,\r\n            previousLength: 0,\r\n            animations: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        let array = [];\r\n        const prevArray = document.getElementsByClassName(\"b-array-bar\");\r\n        document.getElementById(\"binarySearchTargetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 850));\r\n        }\r\n        let sortedArray = array.slice().sort((a, b) => a - b);\r\n        this.setState({\r\n            array: sortedArray,\r\n            found: false,\r\n            disabled: false,\r\n            msgAfterExecution: null,\r\n            previousLength: this.state.animations.length,\r\n        });\r\n    }\r\n\r\n    hightlightWithinBounds(start, end, arrayTiles) {\r\n        for (let i = start; i <= end; i++) {\r\n            arrayTiles[i].style.backgroundColor = NOT_FOUND_COLOR;\r\n            arrayTiles[i].style.transition = \"100ms all\";\r\n        }\r\n    }\r\n\r\n    resetAllTiles(arrayTiles) {\r\n        for (let i = 0; i < arrayTiles.length; i++) {\r\n            arrayTiles[i].style.backgroundColor = DEFAULT_COLOR;\r\n            arrayTiles[i].style.transition = \"100ms all\";\r\n        }\r\n    }\r\n\r\n    binarySearch() {\r\n        const { array } = this.state;\r\n        const animations = [];\r\n        let count = 0;\r\n        const arrayTiles = document.getElementsByClassName(\"b-array-bar\");\r\n        const target = document.getElementById(\"binarySearchTargetVal\").value;\r\n        if (target === \"\") return;\r\n\r\n        binarySearchAnimations(\r\n            array,\r\n            0,\r\n            array.length - 1,\r\n            parseInt(target),\r\n            animations\r\n        );\r\n\r\n        for (let k = 0; k < animations.length; k++) {\r\n            const [left, right, mid, found] = animations[k];\r\n            count++;\r\n\r\n            if (k === animations.length - 1 && found) {\r\n                setTimeout(() => {\r\n                    this.setState({ disabled: true, found: true });\r\n                    this.resetAllTiles(arrayTiles);\r\n                    arrayTiles[mid].classList.add(\"highlight\");\r\n                    arrayTiles[mid].style.backgroundColor = FOUND_COLOR;\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            if (left === 0 && right === 0 && mid === 0 && !found) {\r\n                setTimeout(() => {\r\n                    console.log(\"ELement not found\");\r\n                    this.setState({\r\n                        msgAfterExecution: `Element not found`,\r\n                        found: false,\r\n                    });\r\n                    this.resetAllTiles(arrayTiles);\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ disabled: true });\r\n                this.resetAllTiles(arrayTiles);\r\n                this.hightlightWithinBounds(left, right, arrayTiles);\r\n            }, k * 1000 * ANIMATION_SPEED_SECONDS);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setState({ disabled: false });\r\n        }, count * 1000 * ANIMATION_SPEED_SECONDS);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                    <center>\r\n                        <Header title=\"Binary Search\" />\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-1\"></div>\r\n                                <div className=\"input-group col-sm-10\">\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"binarySearchTargetVal\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Find Element\"\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            onClick={() => this.binarySearch()}\r\n                                            className=\"btn btn-success\"\r\n                                            type=\"button\"\r\n                                            id=\"binarySearchBtn\"\r\n                                            disabled={disabled}\r\n                                        >\r\n                                            Search\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => this.resetArray()}\r\n                                            className=\"btn btn-danger\"\r\n                                            id=\"binarySearchResetArray\"\r\n                                            type=\"button\"\r\n                                            disabled={disabled}\r\n                                        >\r\n                                            Reset Array\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-sm-1 \"></div>\r\n                            </div>\r\n                        </div>\r\n                        {!found ? (\r\n                            <p className=\"not-found\">{msgAfterExecution}</p>\r\n                        ) : null}\r\n                        <br />\r\n                        <div className=\"container\">\r\n                            {array.map((value, idx) => (\r\n                                <ArrayTile\r\n                                    type={\"binarySearch\"}\r\n                                    key={idx}\r\n                                    idx={idx}\r\n                                    val={value}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </center>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function linearSearchAnimations(array, target) {\r\n    let animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        const ele = array[i];\r\n        const tar = parseInt(target);\r\n        if (ele === tar) {\r\n            animations.push([i, ele, true]);\r\n            break;\r\n        } else {\r\n            animations.push([i, ele, false]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function binarySearchAnimations(\r\n    array,\r\n    left,\r\n    right,\r\n    element,\r\n    animations = []\r\n) {\r\n    if (right >= left) {\r\n        let mid = parseInt(left + (right - left) / 2);\r\n        if (array[mid] === element) {\r\n            animations.push([left, right, mid, true]);\r\n            return true;\r\n        } else if (array[mid] > element) {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, left, mid - 1, element, animations);\r\n        } else {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, mid + 1, right, element, animations);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { linearSearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\nimport BackBar from \"./../../utils/backbar\";\r\n\r\n// Stylesheets\r\nimport \"./linearSearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 1;\r\n\r\nexport default class LinearSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        const prevArray = document.getElementsByClassName(\"l-array-bar\");\r\n        const found = false;\r\n        const disabled = false;\r\n        document.getElementById(\"targetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({ array, found, disabled, msgAfterExecution: \"\" });\r\n    }\r\n\r\n    linearSearch() {\r\n        var msg = \"\";\r\n        const target = document.getElementById(\"targetVal\").value;\r\n        if (target === \"\") return;\r\n        const animations = linearSearchAnimations(this.state.array, target);\r\n        console.log(animations);\r\n        let count = 0;\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [idx, currentEle, found] = animations[i];\r\n            const arrayBars = document.getElementsByClassName(\"l-array-bar\");\r\n            const arrayBar = arrayBars[idx];\r\n            const arrayBarStyle = arrayBar.style;\r\n\r\n            count++;\r\n\r\n            if (found) {\r\n                msg = `${currentEle} found at index ${idx}`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: true,\r\n                        disabled: true,\r\n                        elementFoundAt: idx,\r\n                        target: currentEle,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                    arrayBar.classList.add(\"highlight\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n                break;\r\n            } else {\r\n                msg = `${target} not found`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: false,\r\n                        disabled: true,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = NOT_FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({\r\n                disabled: false,\r\n                msgAfterExecution: msg,\r\n            });\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                    <center>\r\n                        <Header title=\"Linear Search\" />\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-1\"></div>\r\n                                <div className=\"input-group col-sm-10\">\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"targetVal\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Find Element\"\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            onClick={() => this.linearSearch()}\r\n                                            className=\"btn btn-success\"\r\n                                            type=\"button\"\r\n                                            id=\"button-addon2\"\r\n                                            disabled={disabled}\r\n                                        >\r\n                                            Search\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => this.resetArray()}\r\n                                            className=\"btn btn-danger\"\r\n                                            id=\"resetArray\"\r\n                                            type=\"button\"\r\n                                            disabled={disabled}\r\n                                        >\r\n                                            Reset Array\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-sm-1 \"></div>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        {!found ? (\r\n                            <p className=\"found growFind\">\r\n                                {msgAfterExecution}\r\n                            </p>\r\n                        ) : null}\r\n                        <div className=\"container\">\r\n                            {array.map((value, idx) => (\r\n                                <ArrayTile\r\n                                    type={`linearSearch`}\r\n                                    key={idx}\r\n                                    idx={idx}\r\n                                    val={value}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </center>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/*\r\n-----------------------\r\nBACKTRACKING ALGORITHMS\r\n-----------------------\r\n*/\r\n\r\n/* -----------------------\r\nN Queen Problem Algorithms\r\n-------------------------- */\r\n\r\nfunction createBoard(size) {\r\n    const board = [];\r\n    for (let i = 0; i < size; i++) {\r\n        board.push(getRowsOfZeroes(size));\r\n    }\r\n    return board;\r\n}\r\n\r\nexport function getNQueensAnimations(size, animations = []) {\r\n    const board = createBoard(size);\r\n    solveNQueenUtil(board, 0, animations);\r\n    return board;\r\n}\r\n\r\nfunction solveNQueenUtil(board = [], col, animations = []) {\r\n    let N = board.length;\r\n\r\n    if (col >= N) return true;\r\n\r\n    for (let i = 0; i < N; i++) {\r\n        if (isSafe(board, i, col)) {\r\n            board[i][col] = true;\r\n            animations.push([i, col, true]);\r\n            if (solveNQueenUtil(board, col + 1, animations)) return true;\r\n            board[i][col] = false;\r\n            animations.push([i, col, false]);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isSafe(board = [], row, col) {\r\n    let N = board.length;\r\n\r\n    for (let i = 0; i < col; i++) {\r\n        if (board[row][i] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getRowsOfZeroes(size) {\r\n    const row = [];\r\n    for (let i = 0; i < size; i++) {\r\n        row.push(false);\r\n    }\r\n    return row;\r\n}\r\n\r\n/* ----------------------\r\nRat In A Maze Solving Algorithms\r\n------------------------- */\r\n\r\nfunction isRatSafe(maze = [], x, y) {\r\n    let mazeRows = maze.length;\r\n    let mazeCols = maze[0].length;\r\n\r\n    return x >= 0 && x < mazeRows && y >= 0 && y < mazeCols && maze[x][y] === 1;\r\n}\r\n\r\nfunction solveRatInAMaze(maze = [], x, y, sol = [], animations = []) {\r\n    let endOfMazeX = maze.length - 1;\r\n    let endOfMazeY = maze[0].length - 1;\r\n\r\n    // Goal State || Base Case\r\n    if (x === endOfMazeX && y === endOfMazeY && maze[x][y] === 1) {\r\n        sol[x][y] = 1;\r\n        animations.push([x, y, true]);\r\n        return true;\r\n    }\r\n\r\n    // Check if maze is valid\r\n    if (isRatSafe(maze, x, y)) {\r\n        animations.push([x, y, true]);\r\n        sol[x][y] = 1;\r\n\r\n        // Move Down\r\n        if (solveRatInAMaze(maze, x, y + 1, sol, animations)) return true;\r\n        // Move Right\r\n        if (solveRatInAMaze(maze, x + 1, y, sol, animations)) return true;\r\n        // No Move is Possible -> Backtrack\r\n        else {\r\n            animations.push([x, y, false]);\r\n            sol[x][y] = 0;\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function solveMaze(maze = [], sol = []) {\r\n    const animations = [];\r\n    if (!solveRatInAMaze(maze, 0, 0, sol, animations)) {\r\n        console.log(\"Solution doesn't\");\r\n        return [sol, []];\r\n    }\r\n    return [sol, animations];\r\n}\r\n\r\nexport function prepareSolutionBoardOfZeroes(size) {\r\n    let sol = [];\r\n    for (let i = 0; i < size; i++) {\r\n        var temp = [];\r\n        for (let j = 0; j < size; j++) {\r\n            temp.push(0);\r\n        }\r\n        sol.push(temp);\r\n    }\r\n    return sol;\r\n}\r\n","import React from \"react\";\r\nimport crown from \"./../nQueensProblem/crown.png\";\r\n\r\nimport { getNQueensAnimations } from \"./../backTrackingAlgorithms\";\r\n\r\nimport BackBar from './../../utils/backbar'\r\n\r\n// Stylesheets\r\nimport \"./../../utils/animate.min.css\";\r\nimport \"./nQueensProblem.css\";\r\n\r\nconst SIZE_OF_BOARD = 4;\r\nvar ANIMATION_SPEED_SECONDS = 1.5;\r\n\r\nconst CELL_COLOR = \"#BFC9CA\";\r\nconst SAFE_COLOR = \"#DC143C\";\r\nconst CROWN_COLOR = \"#FFFFFF\";\r\nconst SAFE = \"#2ECC71\";\r\n\r\nexport default class NQueensProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { disabled: false };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(SIZE_OF_BOARD);\r\n    }\r\n\r\n    drawBoard(SIZE) {\r\n        // This function draws the NxN board and according to the size applies styling which makes easier to visualise huge sized boards on small screens.\r\n        let padding = 0;\r\n        let fontSize = 0;\r\n\r\n        // Deleting the previous board cells and results section for new start\r\n        document.getElementById(\"nQueensBoard\").innerHTML = \"\";\r\n        document.getElementById(\"NQueenResults\").innerHTML = \"\";\r\n\r\n        // Calculating the board size and style values\r\n        switch (SIZE) {\r\n            case 4:\r\n                padding = 20;\r\n                fontSize = 30;\r\n                ANIMATION_SPEED_SECONDS = 1.5;\r\n                break;\r\n            case 5:\r\n            case 6:\r\n                padding = 10;\r\n                fontSize = 25;\r\n                ANIMATION_SPEED_SECONDS = 1;\r\n                break;\r\n            case 7:\r\n                padding = 7;\r\n                fontSize = 20;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            case 8:\r\n                padding = 7;\r\n                fontSize = 18;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        // creating the board\r\n        const container = document.getElementById(\"nQueensBoard\");\r\n\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--Qgrid-rows\", SIZE);\r\n        container.style.setProperty(\"--Qgrid-cols\", SIZE);\r\n\r\n        // Adding cells to the board\r\n        for (let j = 0; j < SIZE * SIZE; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            let item = document.createElement(\"i\");\r\n\r\n            cell.appendChild(item).className = \"fas fa-crown\";\r\n            container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\r\n        }\r\n\r\n        // Styling the cells\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n        const crownsI = document.getElementsByClassName(\"fa-crown\");\r\n        for (let l = 0; l < arrayTiles.length; l++) {\r\n            arrayTiles[l].style.padding = `${padding}px`;\r\n            arrayTiles[l].style.backgroundColor = CELL_COLOR;\r\n            crownsI[l].style.fontSize = `${fontSize}px`;\r\n            crownsI[l].style.color = CELL_COLOR;\r\n        }\r\n\r\n        // Since everything is just created dynamically we have to apply styles\r\n        // one by one to each element because depending on the board size we are\r\n        // determining the corressponding styles.\r\n    }\r\n\r\n    NQueensProblem() {\r\n        // Getting the size from the input box\r\n        let size = parseInt(document.getElementById(\"boardInput\").value);\r\n\r\n        // checking if size is greater than 3 because no solutions exist for n <= 3\r\n        // checking if size is lesser than 17 because the user's RAM will be\r\n        // used heavily for greater sizes and page can be unresponsive.\r\n        if (size < 4 || size > 8) {\r\n            alert(\"Board Size must be between 4 and 8\");\r\n            return;\r\n        }\r\n        // finally drawing the board\r\n        this.drawBoard(size);\r\n\r\n        // getting the cells for visualisations\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n\r\n        // getting the crown element inside the cell\r\n        const crown = document.getElementsByClassName(\"fa-crown\");\r\n\r\n        // getting the results div\r\n        const resultsDiv = document.getElementById(\"NQueenResults\");\r\n\r\n        // getting the Animations for NQueens.\r\n        const NQueensAnimations = [];\r\n        getNQueensAnimations(size, NQueensAnimations);\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < NQueensAnimations.length; i++) {\r\n            count++;\r\n\r\n            // Disabling all the input sources untill Algorithm is finished.\r\n            this.setState({ disabled: true });\r\n\r\n            const [row, col, isQueenSafe] = NQueensAnimations[i];\r\n            const idx = size * row + col;\r\n\r\n            // Creating an alert message for Progress Section\r\n            let alert = document.createElement(\"div\");\r\n            alert.classList.add(\"alert\");\r\n            alert.classList.add(\"animate__animated\");\r\n            alert.classList.add(\"animate__slideInDown\");\r\n\r\n            setTimeout(() => {\r\n                // checking if this is a valid position\r\n                if (isQueenSafe) {\r\n                    // valid positions are highlighted as RED which is royal\r\n                    arrayTiles[idx].style.backgroundColor = SAFE_COLOR;\r\n                    arrayTiles[idx].classList.add(\"safe-queen\");\r\n\r\n                    // making the crown visible\r\n                    crown[idx].style.color = CROWN_COLOR;\r\n                    // popping up the crown with an effect\r\n                    crown[idx].classList.add(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\r\n                    alert.classList.add(\"alert-success\");\r\n                } else {\r\n                    // invalid positions are highlighted as default board color\r\n                    arrayTiles[idx].style.backgroundColor = CELL_COLOR;\r\n                    arrayTiles[idx].classList.remove(\"safe-queen\");\r\n\r\n                    // making the crown invisible\r\n                    crown[idx].style.color = CELL_COLOR;\r\n                    // removing the popup animation\r\n                    crown[idx].classList.remove(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\r\n                    alert.classList.add(\"alert-danger\");\r\n                }\r\n                // adding alert to results div\r\n                resultsDiv.prepend(alert);\r\n                // adding a transition for color change\r\n                arrayTiles[idx].style.transition = \"200ms all\";\r\n            }, ANIMATION_SPEED_SECONDS * 1000 * i);\r\n            // looping according to animation speeds\r\n        }\r\n\r\n        // getting the queens at final safe positions\r\n        const trueValues = document.getElementsByClassName(\"safe-queen\");\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < trueValues.length; i++) {\r\n                trueValues[i].style.backgroundColor = SAFE;\r\n                trueValues[i].style.transition = \"300ms all\";\r\n\r\n                // Enabling the input sources for another visualization\r\n                this.setState({ disabled: false });\r\n\r\n                // This means we have reached at final positions with Queens placed\r\n                // on Valid positions\r\n                if (i === trueValues.length - 1) {\r\n                    // Adding final alert message\r\n                    let alert = document.createElement(\"div\");\r\n                    alert.classList.add(\"alert\");\r\n                    alert.classList.add(\"animate__animated\");\r\n                    alert.classList.add(\"animate__slideInUp\");\r\n                    alert.innerHTML = `All Queens have been placed on Valid positions`;\r\n                    alert.classList.add(\"alert-primary\");\r\n\r\n                    // Prepending the alert message\r\n                    resultsDiv.prepend(alert);\r\n                }\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-12\">\r\n                                    <center>\r\n                                        <h2>\r\n                                            <img\r\n                                                className=\"mb-2\"\r\n                                                src={crown}\r\n                                                width=\"40px\"\r\n                                                alt={\"\"}\r\n                                            />{\" \"}\r\n                                            N-Queens Visualiser\r\n                                        </h2>\r\n                                    </center>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                className=\"Qbox Qboard mb-2\"\r\n                                id=\"nQueensBoard\"\r\n                            ></div>\r\n                            <div className=\"row\">\r\n                                <div className=\"input-group mt-1 container col-sm-6\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <span className=\"input-group-text\">\r\n                                            Board Size\r\n                                        </span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"boardInput\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Board Size\"\r\n                                        defaultValue=\"4\"\r\n                                        readOnly={disabled}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            className=\"btn btn-secondary\"\r\n                                            disabled={disabled}\r\n                                            onClick={() =>\r\n                                                this.NQueensProblem()\r\n                                            }\r\n                                        >\r\n                                            Visualise N-Queens\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {!disabled ? (\r\n                                <center>\r\n                                    <small className=\"text-muted\">\r\n                                        <div className=\"mt-2\"></div>\r\n                                        The Visualiser works best for board\r\n                                        sizes between 4 and 8 inclusive. Larger\r\n                                        board sizes would make the page\r\n                                        unresponsive because of huge number of\r\n                                        computations. &nbsp;\r\n                                        <a href=\"https://github.com/dipeshpatil/algorithms-visualiser/tree/master/src/backTrackingAlgorithms\">\r\n                                            GitHub Repo for this project\r\n                                        </a>\r\n                                    </small>\r\n                                </center>\r\n                            ) : null}\r\n                        </div>\r\n                        <div id=\"NQueenResults\" className=\"col-sm-4 mt-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const MAZES = [\r\n    [\r\n        [1, 1, 0, 0, 1, 1, 1, 0],\r\n        [1, 0, 1, 1, 0, 1, 1, 1],\r\n        [1, 1, 1, 1, 0, 0, 1, 1],\r\n        [0, 0, 0, 1, 1, 1, 0, 0],\r\n        [1, 1, 1, 1, 0, 0, 1, 1],\r\n        [0, 0, 0, 1, 1, 1, 1, 0],\r\n        [1, 1, 0, 0, 0, 0, 1, 1],\r\n        [1, 0, 1, 1, 0, 0, 1, 1],\r\n    ],\r\n    [\r\n        [1, 1, 1, 1, 1, 1, 1, 1],\r\n        [0, 0, 1, 0, 0, 1, 1, 1],\r\n        [0, 0, 1, 0, 0, 1, 0, 0],\r\n        [0, 1, 1, 1, 0, 1, 0, 0],\r\n        [0, 0, 0, 1, 1, 1, 1, 1],\r\n        [1, 0, 0, 0, 1, 0, 0, 1],\r\n        [1, 0, 1, 1, 1, 0, 0, 1],\r\n        [1, 0, 0, 0, 0, 0, 0, 1],\r\n    ],\r\n    [\r\n        [1, 1, 1, 1, 0, 1, 1, 1],\r\n        [1, 0, 0, 0, 1, 0, 0, 0],\r\n        [1, 0, 0, 0, 1, 1, 1, 1],\r\n        [1, 1, 1, 0, 0, 0, 0, 0],\r\n        [1, 0, 1, 0, 0, 0, 0, 0],\r\n        [1, 0, 1, 1, 1, 1, 1, 1],\r\n        [1, 0, 1, 0, 0, 0, 0, 0],\r\n        [1, 1, 1, 1, 1, 1, 1, 1],\r\n    ],\r\n];\r\n\r\nexport default MAZES;\r\n","import React from \"react\";\r\n\r\nimport BackBar from \"./../../utils/backbar\";\r\n\r\nimport {\r\n    solveMaze,\r\n    prepareSolutionBoardOfZeroes,\r\n} from \"./../backTrackingAlgorithms\";\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval\";\r\n// Stylesheets\r\nimport \"./ratInAMaze.css\";\r\n\r\nimport MAZES from \"./arrayofMazes\";\r\n\r\nconst MAZE = MAZES[randomIntFromInterval(0, MAZES.length - 1)];\r\n// const MAZE = MAZES[2];\r\nconst SOL = prepareSolutionBoardOfZeroes(MAZE.length);\r\n\r\nconst NO_PATH_COLOR = \"#ededed\";\r\nconst PATH_COLOR = \"#ADD2FE\";\r\nconst SAFE_COLOR = \"#B0FCEF\";\r\n\r\nconst ANIMATION_SPEED_MS = 1000;\r\n\r\nexport default class RatInAMazeProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(MAZE);\r\n    }\r\n\r\n    testAlgo() {\r\n        const sol = solveMaze(MAZE, SOL, []);\r\n\r\n        const animations = sol[1];\r\n        const solution = sol[0];\r\n\r\n        const blocks = document.getElementsByClassName(\"r-array-tile\");\r\n        const rat = document.getElementsByClassName(\"rat\");\r\n        let count = 0;\r\n\r\n        const finalPath = [];\r\n        for (let i = 0; i < solution.length; i++) {\r\n            for (let j = 0; j < solution.length; j++) {\r\n                let idx = MAZE.length * i + j;\r\n                if (solution[i][j] === 1) {\r\n                    finalPath.push(idx);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [x, y, isRatSafe] = animations[i]; // current\r\n            const idx = x * MAZE.length + y;\r\n            const blockStyle = blocks[idx].style;\r\n\r\n            setTimeout(() => {\r\n                if (isRatSafe) {\r\n                    blockStyle.backgroundColor = SAFE_COLOR;\r\n                    rat[idx].innerHTML = \"🐀\";\r\n                    rat[idx].classList.add(\"flipH\");\r\n                } else {\r\n                    blockStyle.backgroundColor = PATH_COLOR;\r\n                    rat[idx].innerHTML = \"\";\r\n                    rat[idx].classList.remove(\"flipH\");\r\n                }\r\n            }, i * ANIMATION_SPEED_MS);\r\n            count = i;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < finalPath.length; i++) {\r\n                setTimeout(() => {\r\n                    blocks[finalPath[i]].classList.add(\"highlightPath\");\r\n                }, i * 40);\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    drawBoard(MAZE = []) {\r\n        const ROWS = MAZE.length;\r\n        const COLS = MAZE[0].length;\r\n\r\n        const maze = document.getElementById(\"ratMazeBoard\");\r\n        maze.innerHTML = \"\";\r\n\r\n        maze.style.setProperty(\"--Rgrid-rows\", ROWS);\r\n        maze.style.setProperty(\"--Rgrid-cols\", COLS);\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            for (let j = 0; j < COLS; j++) {\r\n                let cell = document.createElement(\"div\");\r\n                let item = document.createElement(\"i\");\r\n                let cellStyle = cell.style;\r\n                cell.appendChild(item).className = \"fas rat\";\r\n\r\n                if (i === 0 && j === 0) {\r\n                    cell.appendChild(item).classList.add(\"flipH\");\r\n                    item.innerHTML = \"🐀\";\r\n                }\r\n\r\n                if (i === ROWS - 1 && j === COLS - 1) {\r\n                    cell.appendChild(item).classList.add(\"flipH\");\r\n                    item.innerHTML = \"🚪\";\r\n                }\r\n\r\n                if (MAZE[i][j] === 1) {\r\n                    cellStyle.backgroundColor = PATH_COLOR;\r\n                } else {\r\n                    cellStyle.backgroundColor = NO_PATH_COLOR;\r\n                }\r\n\r\n                maze.appendChild(cell).className = \"Rgrid-item r-array-tile\";\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <h2 className=\"text-center mt-2\">Rat In A Maze</h2>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7\">\r\n                            <div\r\n                                className=\"Rbox Rboard mt-2\"\r\n                                id=\"ratMazeBoard\"\r\n                            ></div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 mt-2\">\r\n                            <button\r\n                                onClick={() => this.testAlgo()}\r\n                                className=\"btn btn-sm btn-primary\"\r\n                            >\r\n                                Visualize Algorithm\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends React.Component {\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onNodeClick,\r\n            onNodeOver,\r\n            onNodeOut,\r\n        } = this.props;\r\n\r\n        const extraClassName = isFinish\r\n            ? \"node-finish\"\r\n            : isStart\r\n            ? \"node-start\"\r\n            : isWall\r\n            ? \"node-wall\"\r\n            : \"\";\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName} `}\r\n                onClick={() => onNodeClick(row, col)}\r\n                onMouseOver={() => onNodeOver(row, col)}\r\n                onMouseOut={() => onNodeOut(row, col)}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n","export function convert1Dto2DArray(OneDArray, ROWS, COLS) {\r\n    const twoDArray = [];\r\n    for (let i = 0; i < ROWS; i++) {\r\n        const oneDRow = [];\r\n        for (let j = 0; j < COLS; j++) {\r\n            const { col, row } = OneDArray[i * ROWS + j];\r\n            if (i === row && j === col) {\r\n                oneDRow.push(OneDArray[i * ROWS + j]);\r\n            }\r\n        }\r\n        twoDArray.push(oneDRow);\r\n    }\r\n    return twoDArray;\r\n}\r\n\r\nexport function convert2Dto1DArray(TwoDArray) {\r\n    const OneDArray = [];\r\n    for (let i = 0; i < TwoDArray.length; i++) {\r\n        for (let j = 0; j < TwoDArray[i].length; j++) {\r\n            OneDArray.push(TwoDArray[i][j]);\r\n        }\r\n    }\r\n    return OneDArray;\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n\r\n        if (closestNode.isWall) continue;\r\n\r\n        if (closestNode.distance === Infinity)\r\n            return [visitedNodesInOrder, calculatePath(finishNode)];\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (closestNode === finishNode)\r\n        return [visitedNodesInOrder, calculatePath(finishNode)];\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function getAllNodes(grid = []) {\r\n    const nodes = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            nodes.push(grid[i][j]);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n","export function bfs(grid = [], startNode, finishNode) {\r\n    const queue = [];\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.isVisited = true;\r\n    queue.push(startNode);\r\n\r\n    while (!!queue.length) {\r\n        let node = queue.shift();\r\n\r\n        if (finishNode === node)\r\n            return [visitedNodesInOrder, calculatePath(finishNode)];\r\n\r\n        if (node.isWall) continue;\r\n\r\n        const neighbors = getAllNeighbors(grid, node);\r\n\r\n        for (const neighbor of neighbors) {\r\n            neighbor.isVisited = true;\r\n            neighbor.previousNode = node;\r\n            visitedNodesInOrder.push(neighbor);\r\n            queue.push(neighbor);\r\n        }\r\n    }\r\n\r\n    return [visitedNodesInOrder, calculatePath(finishNode)];\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n\r\nfunction getAllNeighbors(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isVisited &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall &&\r\n        !grid[row - 1][col].isVisited\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall &&\r\n        !grid[row][col - 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall &&\r\n        !grid[row][col + 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n","export function dfs(grid = [], startNode, finishNode) {\r\n    const stack = [];\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.isVisited = true;\r\n    stack.push(startNode);\r\n\r\n    while (!!stack.length) {\r\n        let node = stack.pop();\r\n\r\n        if (finishNode === node)\r\n            return [visitedNodesInOrder, calculatePath(finishNode)];\r\n\r\n        if (node.isWall) continue;\r\n\r\n        const neighbors = getAllNeighbors(grid, node);\r\n\r\n        for (const neighbor of neighbors) {\r\n            neighbor.isVisited = true;\r\n            neighbor.previousNode = node;\r\n            visitedNodesInOrder.push(neighbor);\r\n            stack.push(neighbor);\r\n        }\r\n    }\r\n\r\n    return [visitedNodesInOrder, calculatePath(finishNode)];\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n\r\nfunction getAllNeighbors(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isVisited &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall &&\r\n        !grid[row - 1][col].isVisited\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall &&\r\n        !grid[row][col - 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall &&\r\n        !grid[row][col + 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n","export function astar(grid = [], startNode, finishNode) {\r\n    const closedlist = [];\r\n    const openlist = [];\r\n\r\n    startNode.cost = {\r\n        F: 0,\r\n        G: 0,\r\n        H: 0,\r\n    };\r\n\r\n    openlist.push(startNode);\r\n\r\n    while (!!openlist.length) {\r\n        openlist.sort((a, b) => a.cost.F - b.cost.F);\r\n        const current = openlist.shift();\r\n\r\n        closedlist.push(current);\r\n\r\n        if (current.isWall) continue;\r\n\r\n        if (current === finishNode)\r\n            return [closedlist, calculatePath(finishNode)];\r\n\r\n        const neighbors = getNeighbors(grid, current);\r\n\r\n        for (let i = 0; i < neighbors.length; i++) {\r\n            const nNode = neighbors[i];\r\n            if (closedlist.includes(nNode)) continue;\r\n\r\n            nNode.cost.G = calculateCost(nNode, startNode, \"E\");\r\n            nNode.cost.H = calculateCost(nNode, finishNode, \"E\");\r\n            nNode.cost.F = nNode.cost.G + nNode.cost.H;\r\n\r\n            if (!openlist.includes(nNode)) {\r\n                nNode.previousNode = current;\r\n                openlist.push(nNode);\r\n            }\r\n        }\r\n    }\r\n    return [closedlist, calculatePath(finishNode)];\r\n}\r\n\r\nfunction calculateCost(currentNode, node, distanceType) {\r\n    switch (distanceType) {\r\n        // Euclidean Distance\r\n        case \"E\":\r\n            return Math.floor(\r\n                Math.sqrt(\r\n                    Math.pow(currentNode.row - node.row, 2) +\r\n                        Math.pow(currentNode.col - node.col, 2)\r\n                ) * 10\r\n            );\r\n\r\n        // Manhattan Distance\r\n        case \"M\":\r\n            return (\r\n                Math.abs(currentNode.row - node.row) +\r\n                Math.abs(currentNode.col - node.col)\r\n            );\r\n\r\n        // Diagonal Distance\r\n        case \"D\":\r\n            return Math.max(\r\n                Math.abs(currentNode.row - node.row),\r\n                Math.abs(currentNode.col - node.col)\r\n            );\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nfunction getNeighbors(grid = [], currentNode) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n    const { row, col } = currentNode;\r\n    const neighbors = [];\r\n\r\n    // Top, Left, Right, Bottom Nodes\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    // Diagonal Nodes\r\n    // if (\r\n    //     row - 1 >= 0 &&\r\n    //     row - 1 < ROWS &&\r\n    //     col - 1 >= 0 &&\r\n    //     col - 1 < COLS &&\r\n    //     !grid[row - 1][col - 1].isWall\r\n    // ) {\r\n    //     neighbors.push(grid[row - 1][col - 1]);\r\n    // }\r\n    // if (\r\n    //     row - 1 >= 0 &&\r\n    //     row - 1 < ROWS &&\r\n    //     col + 1 >= 0 &&\r\n    //     col + 1 < COLS &&\r\n    //     !grid[row - 1][col + 1].isWall\r\n    // ) {\r\n    //     neighbors.push(grid[row - 1][col + 1]);\r\n    // }\r\n    // if (\r\n    //     row + 1 >= 0 &&\r\n    //     row + 1 < ROWS &&\r\n    //     col - 1 >= 0 &&\r\n    //     col - 1 < COLS &&\r\n    //     !grid[row + 1][col - 1].isWall\r\n    // ) {\r\n    //     neighbors.push(grid[row + 1][col - 1]);\r\n    // }\r\n    // if (\r\n    //     row + 1 >= 0 &&\r\n    //     row + 1 < ROWS &&\r\n    //     col + 1 >= 0 &&\r\n    //     col + 1 < COLS &&\r\n    //     !grid[row + 1][col + 1].isWall\r\n    // ) {\r\n    //     neighbors.push(grid[row + 1][col + 1]);\r\n    // }\r\n\r\n    return neighbors;\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n","export function bidirectionalSearch(grid = [], startNode, finishNode) {\r\n    const squeue = [];\r\n    const dqueue = [];\r\n\r\n    const svisited = [],\r\n        dvisited = [];\r\n\r\n    startNode.isVisited = true;\r\n    startNode.previousNode = null;\r\n    squeue.push(startNode);\r\n\r\n    finishNode.isVisited = true;\r\n    finishNode.previousNode = null;\r\n    dqueue.push(finishNode);\r\n\r\n    while (squeue.length && dqueue.length) {\r\n        const currsn = squeue.shift();\r\n        const currdn = dqueue.shift();\r\n\r\n        const sneighbors = getAllNeighbors(grid, currsn);\r\n        const dneighbors = getAllNeighbors(grid, currdn);\r\n\r\n        if (currdn === currsn) break;\r\n\r\n        for (const sneighbor of sneighbors) {\r\n            if (!sneighbor.isVisited) {\r\n                sneighbor.isVisited = true;\r\n                sneighbor.previousNode = currsn;\r\n                squeue.push(sneighbor);\r\n                svisited.push(sneighbor);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (const dneighbor of dneighbors) {\r\n            if (!dneighbor.isVisited) {\r\n                dneighbor.isVisited = true;\r\n                dneighbor.previousNode = currdn;\r\n                dqueue.push(dneighbor);\r\n                dvisited.push(dneighbor);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const sourcePaths = [],\r\n        destPaths = [];\r\n\r\n    for (let i = 0; i < svisited.length; i++)\r\n        sourcePaths.push(calculatePath(svisited[i]));\r\n\r\n    for (let i = 0; i < dvisited.length; i++)\r\n        destPaths.push(calculatePath(dvisited[i]));\r\n\r\n    for (let i = sourcePaths.length - 1; i >= 0; i--) {\r\n        const sPathRow = sourcePaths[i];\r\n        const splast = sPathRow[sPathRow.length - 1];\r\n        const neighbors = getAdjacents(grid, splast);\r\n        for (const neighbor of neighbors) {\r\n            for (let j = 0; j < destPaths.length; j++) {\r\n                const destPathRow = destPaths[j];\r\n                if (destPathRow.includes(neighbor)) {\r\n                    return [svisited, dvisited, sPathRow, destPathRow];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getAdjacents(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n\r\nfunction getAllNeighbors(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isVisited &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall &&\r\n        !grid[row - 1][col].isVisited\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall &&\r\n        !grid[row][col - 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall &&\r\n        !grid[row][col + 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n\r\nexport function calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n","function getNodeNeighbors(row, col, ROWS, COLS) {\r\n    const nodeArray = [];\r\n    for (let i = 0, j = 0; i < ROWS || j < COLS; i++, j++) {\r\n        nodeArray.push([row, i]);\r\n        nodeArray.push([j, col]);\r\n    }\r\n    return nodeArray;\r\n}\r\n\r\nexport function highlightGrid(row, col, ROWS, COLS) {\r\n    const nodeArray = getNodeNeighbors(row, col, ROWS, COLS);\r\n    for (const nodeVal of nodeArray) {\r\n        const [nRow, nCol] = nodeVal;\r\n        const node = document.getElementById(`node-${nRow}-${nCol}`);\r\n\r\n        if (nRow === parseInt(ROWS / 2)) {\r\n            node.classList.add(\"plus-center\");\r\n        } else {\r\n            node.classList.add(\"plus\");\r\n        }\r\n\r\n        if (nCol === parseInt(COLS / 2)) {\r\n            node.classList.add(\"plus-center\");\r\n        } else {\r\n            node.classList.add(\"plus\");\r\n        }\r\n    }\r\n}\r\n\r\nexport function unHighlightGrid(row, col, ROWS, COLS) {\r\n    const nodeArray = getNodeNeighbors(row, col, ROWS, COLS);\r\n    for (const nodeVal of nodeArray) {\r\n        const [nRow, nCol] = nodeVal;\r\n        const node = document.getElementById(`node-${nRow}-${nCol}`);\r\n\r\n        if (nRow === parseInt(ROWS / 2)) {\r\n            node.classList.remove(\"plus-center\");\r\n        } else {\r\n            node.classList.remove(\"plus\");\r\n        }\r\n\r\n        if (nCol === parseInt(COLS / 2)) {\r\n            node.classList.remove(\"plus-center\");\r\n        } else {\r\n            node.classList.remove(\"plus\");\r\n        }\r\n    }\r\n}\r\n\r\nexport function highlightGridDiagonals(nodes = [], ROWS, COLS) {\r\n    for (let i = 0; i < ROWS; i++) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            const { row, col } = nodes[i][j];\r\n            if (row === col) {\r\n                document\r\n                    .getElementById(`node-${row}-${col}`)\r\n                    .classList.add(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n    for (let i = ROWS - 1; i >= 0; i--) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            if (i + j === parseInt((ROWS - 1 + COLS) / 2)) {\r\n                document\r\n                    .getElementById(`node-${i}-${j}`)\r\n                    .classList.add(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function unHighlightGridDiagonals(nodes = [], ROWS, COLS) {\r\n    for (let i = 0; i < ROWS; i++) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            const { row, col } = nodes[i][j];\r\n            if (row === col) {\r\n                document\r\n                    .getElementById(`node-${row}-${col}`)\r\n                    .classList.remove(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n    for (let i = ROWS - 1; i >= 0; i--) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            if (i + j === parseInt((ROWS - 1 + COLS) / 2)) {\r\n                document\r\n                    .getElementById(`node-${i}-${j}`)\r\n                    .classList.remove(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Legend = () => (\r\n    <div id=\"legend\" className=\"mt-2 mb-2\">\r\n        <div id=\"legendRow\" className=\"row p-2\">\r\n            <div className=\"col-6\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-start\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">Source</div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-wall\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">Wall</div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-visited\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">Visited</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-6\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-finish\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">\r\n                            Destination\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-path\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">Path</div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-shortest-path\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">\r\n                            Shortest Path\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Legend;\r\n","import React from \"react\";\r\n\r\nconst ComplexityTable = () => (\r\n    <div id=\"complexityTableP\">\r\n        <table className=\"table-bordered table table-striped text-center rounded-b mt-2  table-light\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Algorithm</th>\r\n                    <th>Time</th>\r\n                    <th>Space</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td className=\"text-primary\">Dijkstras</td>\r\n                    <td>O(E + V&times;LogV)</td>\r\n                    <td>O(V)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">BFS</td>\r\n                    <td>\r\n                        O(V + E) = O(b<sup>d</sup>)\r\n                    </td>\r\n                    <td>\r\n                        O(V) = O(b<sup>d</sup>)\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">A* Search</td>\r\n                    <td>O(E)</td>\r\n                    <td>O(V)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Bi-Directional Search</td>\r\n                    <td>\r\n                        O(b<sup>d/2</sup>)\r\n                    </td>\r\n                    <td>\r\n                        O(b<sup>d/2</sup>)\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default ComplexityTable;\r\n","import React from \"react\";\r\n\r\n// Importing Node Component to display Node on Grid\r\nimport Node from \"./Node/Node\";\r\n\r\n// Array Conversion Functions\r\nimport {\r\n    convert1Dto2DArray,\r\n    convert2Dto1DArray,\r\n} from \"./pathfinder-utils/arrayConversions\";\r\n\r\n// Pathfinding Algorithms\r\nimport { dijkstra } from \"./pathFindingAlgorithms/dijkstra\";\r\nimport { bfs } from \"./pathFindingAlgorithms/breadthFirstSearch\";\r\nimport { dfs } from \"./pathFindingAlgorithms/depthFirstSearch\";\r\nimport { astar } from \"./pathFindingAlgorithms/astar\";\r\nimport { bidirectionalSearch } from \"./pathFindingAlgorithms/bidirectionalSearch\";\r\n\r\n// Maze Generation Algorithm\r\nimport { generateMaze } from \"./generateMaze\";\r\n\r\nimport BackBar from \"./../utils/backbar\";\r\n\r\n// Highlight Board Functions\r\nimport {\r\n    highlightGrid,\r\n    unHighlightGrid,\r\n    highlightGridDiagonals,\r\n    unHighlightGridDiagonals,\r\n} from \"./pathfinder-utils/highlightMazeNodes\";\r\n\r\n// Legend Component\r\nimport Legend from \"./pathfinder-utils/legend\";\r\n\r\n// Complexity table\r\nimport ComplexityTable from \"./pathfinder-utils/complexityTable\";\r\n\r\n//Stylesheets\r\nimport \"./pathfinderVisualiser.css\";\r\n\r\nconst x = 3;\r\nconst ROWS = 46 - x;\r\nconst COLS = 46 - x;\r\n\r\n// Constants to toggle Start/Finish/Wall on Grid\r\nconst START_NODE_STATE = 1;\r\nconst END_NODE_STATE = 2;\r\nconst WALL_NODE_STATE = 3;\r\n\r\nconst SPEED = 25;\r\n\r\nexport default class PathFinderVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            modifyingNodeState: 0,\r\n            START_NODE_ROW: 2,\r\n            START_NODE_COL: 2,\r\n            FINISH_NODE_ROW: ROWS - 3,\r\n            FINISH_NODE_COL: COLS - 3,\r\n            disableMazesButton: false,\r\n            disableNodesButton: false,\r\n            disableClearMazeButton: false,\r\n\r\n            highlightMazeNodes: true,\r\n            isGridDiagonalsHighlighted: false,\r\n            speed: SPEED,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setUpGrid();\r\n    }\r\n\r\n    setUpGrid() {\r\n        const grid = [];\r\n\r\n        const gridBox = document.getElementById(\"grid\");\r\n        gridBox.style.setProperty(\"--p-grid-rows\", ROWS);\r\n        gridBox.style.setProperty(\"--p-grid-cols\", COLS);\r\n\r\n        for (let i = 0; i < ROWS; i++)\r\n            for (let j = 0; j < COLS; j++) grid.push(this.createNode(i, j));\r\n\r\n        this.setState({ grid });\r\n    }\r\n\r\n    clearBoard() {\r\n        this.setUpGrid();\r\n        const grid = this.state.grid;\r\n        for (let i = 0; i < grid.length; i++) {\r\n            const node = grid[i];\r\n            document\r\n                .getElementById(`node-${node.row}-${node.col}`)\r\n                .classList.remove(\"node-visited\");\r\n            document\r\n                .getElementById(`node-${node.row}-${node.col}`)\r\n                .classList.remove(\"node-shortest-path\");\r\n        }\r\n        this.setState({\r\n            disableMazesButton: false,\r\n            disableNodesButton: false,\r\n            highlightMazeNodes: true,\r\n        });\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        const algorithm = parseInt(\r\n            document.getElementById(\"pathFindingAlgoDropDown\").value\r\n        );\r\n        if (algorithm !== 0) this.visualiseAlgorithms(algorithm);\r\n        else {\r\n            alert(\"Select an Algorithm first!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    visualiseAlgorithms(algorithm) {\r\n        this.setState({\r\n            disableNodesButton: true,\r\n            disableMazesButton: true,\r\n            disableClearMazeButton: true,\r\n            modifyingNodeState: 0,\r\n        });\r\n        const {\r\n            grid,\r\n            START_NODE_COL,\r\n            START_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n        } = this.state;\r\n\r\n        const d2Grid = convert1Dto2DArray(grid, ROWS, COLS);\r\n\r\n        const STARTNODE = d2Grid[START_NODE_ROW][START_NODE_COL];\r\n        const FINISHNODE = d2Grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n\r\n        var visitedNodesInOrder, nodesInShortestPathOrder;\r\n\r\n        switch (algorithm) {\r\n            case 0:\r\n                alert(\"Select an algorithm first!\");\r\n                this.setState({\r\n                    disableMazesButton: false,\r\n                    disableNodesButton: false,\r\n                });\r\n                return;\r\n            case 1:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = dijkstra(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 2:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = bfs(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 3:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = astar(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 4:\r\n                const [\r\n                    source_visited,\r\n                    dest_visited,\r\n                    sPathNodes,\r\n                    dPathNodes,\r\n                ] = bidirectionalSearch(d2Grid, STARTNODE, FINISHNODE);\r\n\r\n                this.animatePathBD(\r\n                    source_visited,\r\n                    sPathNodes,\r\n                    \"node-visited-s\"\r\n                );\r\n                this.animatePathBD(dest_visited, dPathNodes, \"node-visited-d\");\r\n\r\n                return;\r\n            case 5:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = dfs(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        this.animatePath(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    highlightNodes(row, col) {\r\n        if (this.state.highlightMazeNodes) {\r\n            highlightGrid(row, col, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    unHighlightNodes(row, col) {\r\n        if (this.state.highlightMazeNodes) {\r\n            unHighlightGrid(row, col, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    // change `isGridDiagonalsHighlighted` to true in state\r\n    // to highlight diagonals on board\r\n\r\n    highlightDiagonals() {\r\n        if (this.state.isGridDiagonalsHighlighted) {\r\n            const nodes = convert1Dto2DArray(\r\n                this.state.grid.slice(),\r\n                ROWS,\r\n                COLS\r\n            );\r\n            highlightGridDiagonals(nodes, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    unHighlightDiagonals() {\r\n        if (this.state.isGridDiagonalsHighlighted) {\r\n            const nodes = convert1Dto2DArray(\r\n                this.state.grid.slice(),\r\n                ROWS,\r\n                COLS\r\n            );\r\n            unHighlightGridDiagonals(nodes, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    toggleStartOrFinish(grid = [], row, col, NODE_ROW, NODE_COL, nodeType) {\r\n        const newGrid = grid.slice();\r\n\r\n        const currentNode = newGrid[ROWS * NODE_ROW + NODE_COL];\r\n        const newNode = newGrid[ROWS * row + col];\r\n\r\n        if (nodeType === \"START\") {\r\n            if (newNode.isWall || newNode.isFinish) {\r\n                return false;\r\n            } else {\r\n                currentNode.isStart = false;\r\n                newNode.isStart = true;\r\n                this.setState({\r\n                    grid: newGrid,\r\n                });\r\n                return true;\r\n            }\r\n        } else if (nodeType === \"FINISH\") {\r\n            if (newNode.isWall || newNode.isStart) {\r\n                return false;\r\n            } else {\r\n                currentNode.isFinish = false;\r\n                newNode.isFinish = true;\r\n                this.setState({\r\n                    grid: newGrid,\r\n                });\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleWall(grid, row, col) {\r\n        const newGrid = grid.slice();\r\n        const currentNode = newGrid[ROWS * row + col];\r\n        if (!currentNode.isFinish && !currentNode.isStart) {\r\n            currentNode.isWall = !currentNode.isWall;\r\n            this.setState({ grid: newGrid });\r\n        }\r\n    }\r\n\r\n    handleNodeOperations(row, col, NODE_STATE) {\r\n        const {\r\n            START_NODE_ROW,\r\n            START_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n            grid,\r\n        } = this.state;\r\n        switch (NODE_STATE) {\r\n            case 1:\r\n                if (\r\n                    this.toggleStartOrFinish(\r\n                        grid,\r\n                        row,\r\n                        col,\r\n                        START_NODE_ROW,\r\n                        START_NODE_COL,\r\n                        \"START\"\r\n                    )\r\n                ) {\r\n                    this.setState({\r\n                        START_NODE_ROW: row,\r\n                        START_NODE_COL: col,\r\n                    });\r\n                }\r\n                break;\r\n            case 2:\r\n                if (\r\n                    this.toggleStartOrFinish(\r\n                        grid,\r\n                        row,\r\n                        col,\r\n                        FINISH_NODE_ROW,\r\n                        FINISH_NODE_COL,\r\n                        \"FINISH\"\r\n                    )\r\n                ) {\r\n                    this.setState({\r\n                        FINISH_NODE_ROW: row,\r\n                        FINISH_NODE_COL: col,\r\n                    });\r\n                }\r\n                break;\r\n            case 3:\r\n                this.toggleWall(grid, row, col);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    createNode(row, col) {\r\n        const {\r\n            START_NODE_ROW,\r\n            START_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n        } = this.state;\r\n        return {\r\n            row,\r\n            col,\r\n            isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n            isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n            distance: Infinity,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n            cost: {\r\n                F: Infinity,\r\n                G: Infinity,\r\n                H: Infinity,\r\n            },\r\n        };\r\n    }\r\n\r\n    modifyNodeState(STATE) {\r\n        this.setState({ modifyingNodeState: STATE });\r\n    }\r\n\r\n    generateMaze(grid) {\r\n        this.setState({\r\n            disableMazesButton: true,\r\n            disableClearMazeButton: false,\r\n        });\r\n        const twoDArray = convert1Dto2DArray(grid, ROWS, COLS);\r\n        const mazeGrid = generateMaze(twoDArray, ROWS, COLS);\r\n        const OneDArray = convert2Dto1DArray(mazeGrid);\r\n        this.setState({ grid: OneDArray });\r\n    }\r\n\r\n    animatePath(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        this.setState({ disableNodesButton: true, highlightMazeNodes: false });\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, this.state.speed * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                if (!node.isStart && !node.isFinish && !node.isWall) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).className = \"node node-visited\";\r\n                }\r\n            }, this.state.speed * i);\r\n        }\r\n    }\r\n\r\n    animatePathBD(visitedNodesInOrder, nodesInShortestPathOrder, type) {\r\n        this.setState({ disableNodesButton: true, highlightMazeNodes: false });\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, this.state.speed * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                if (!node.isStart && !node.isFinish && !node.isWall) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).className = \"node \" + type;\r\n                }\r\n            }, this.state.speed * i);\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                if (!node.isStart && !node.isFinish && !node.isWall) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).classList = \"node node-shortest-path\";\r\n                }\r\n                if (node.isFinish) {\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            disableClearMazeButton: false,\r\n                        });\r\n                    }, 1000);\r\n                }\r\n            }, this.state.speed * i);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            grid,\r\n            modifyingNodeState,\r\n            disableMazesButton,\r\n            disableNodesButton,\r\n            disableClearMazeButton,\r\n        } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7 mb-1\">\r\n                            <div className=\"box shadowT mb-2\">\r\n                                <div\r\n                                    onMouseOut={() =>\r\n                                        this.unHighlightDiagonals()\r\n                                    }\r\n                                    onMouseOver={() =>\r\n                                        this.highlightDiagonals()\r\n                                    }\r\n                                    id=\"grid\"\r\n                                    className=\"grid\"\r\n                                >\r\n                                    {grid.map((node, idx) => {\r\n                                        const {\r\n                                            row,\r\n                                            col,\r\n                                            isStart,\r\n                                            isFinish,\r\n                                            isWall,\r\n                                        } = node;\r\n                                        return (\r\n                                            <Node\r\n                                                key={idx}\r\n                                                col={col}\r\n                                                isFinish={isFinish}\r\n                                                isStart={isStart}\r\n                                                isWall={isWall}\r\n                                                row={row}\r\n                                                onNodeClick={(row, col) =>\r\n                                                    this.handleNodeOperations(\r\n                                                        row,\r\n                                                        col,\r\n                                                        modifyingNodeState\r\n                                                    )\r\n                                                }\r\n                                                onNodeOver={(row, col) =>\r\n                                                    this.highlightNodes(\r\n                                                        row,\r\n                                                        col\r\n                                                    )\r\n                                                }\r\n                                                onNodeOut={(row, col) =>\r\n                                                    this.unHighlightNodes(\r\n                                                        row,\r\n                                                        col\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 shadowT rounded-b mb-2 bg-light\">\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableNodesButton}\r\n                                    className=\"btn bg-start\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(START_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Place Source\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableNodesButton}\r\n                                    className=\"btn bg-end\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(END_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Place Destination\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableNodesButton}\r\n                                    className=\"btn btn-dark\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(WALL_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Place Wall\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableMazesButton}\r\n                                    className=\"btn btn-secondary\"\r\n                                    onClick={() => this.generateMaze(grid)}\r\n                                >\r\n                                    Generate Maze\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableClearMazeButton}\r\n                                    className=\"btn btn-secondary\"\r\n                                    onClick={() => this.clearBoard()}\r\n                                >\r\n                                    Clear Maze\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <div className=\"input-group\">\r\n                                    <select\r\n                                        disabled={disableNodesButton}\r\n                                        id=\"pathFindingAlgoDropDown\"\r\n                                        className=\"custom-select\"\r\n                                        defaultValue=\"0\"\r\n                                    >\r\n                                        <option disabled value=\"0\">\r\n                                            Select Algorithm\r\n                                        </option>\r\n                                        <option value=\"1\">Dijkstras</option>\r\n                                        <option value=\"2\">\r\n                                            Breadth First Search\r\n                                        </option>\r\n                                        <option value=\"5\">\r\n                                            Depth First Search\r\n                                        </option>\r\n                                        <option value=\"3\">A* Search</option>\r\n                                        <option value=\"4\">\r\n                                            Bi-Directional Search\r\n                                        </option>\r\n                                    </select>\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            disabled={disableNodesButton}\r\n                                            onClick={() =>\r\n                                                this.selectAlgorithm()\r\n                                            }\r\n                                            className=\"btn bg-purple\"\r\n                                        >\r\n                                            Perform Search\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <Legend />\r\n                            <ComplexityTable />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import generate from \"@indutny/maze\";\r\n\r\nexport function generateMaze(grid, ROW, COL) {\r\n    const maze = generate({ width: COL, height: ROW });\r\n    for (let i = 0; i < ROW; i++) {\r\n        for (let j = 0; j < COL; j++) {\r\n            const { row, col } = grid[i][j];\r\n            if (grid[i][j].isStart || grid[i][j].isFinish) {\r\n                if (row > 0) maze[row - 1][col] = 0;\r\n                if (row < ROW - 1) maze[row + 1][col] = 0;\r\n                if (col > 0) maze[row][col - 1] = 0;\r\n                if (col < COL - 1) maze[row][col + 1] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < ROW; i++) {\r\n        for (let j = 0; j < COL; j++) {\r\n            if (\r\n                !grid[i][j].isStart &&\r\n                !grid[i][j].isFinish &&\r\n                maze[i][j] === 1\r\n            ) {\r\n                grid[i][j].isWall = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return grid;\r\n}\r\n","import React from \"react\";\n\nimport NavBar from \"./utils/navbar\";\nimport { Route } from \"react-router-dom\";\n\n//IndexTable\nimport IndexTable from \"./utils/indexTable\";\n\n// Sorting Visualiser\nimport SortingVisualiser from \"./sortingAlgorithms/sortingVisualiser\";\n\n// Searching Visualiser\nimport BinarySearch from \"./searchingAlgorithms/binarySearch/binarySearch\";\nimport LinearSearch from \"./searchingAlgorithms/linearSearch/linearSearch\";\n\n// Backtracking Visualiser\nimport NQueensProblem from \"./backTrackingAlgorithms/nQueensProblem/nQueensProblem\";\nimport RatInAMazeProblem from \"./backTrackingAlgorithms/ratInAMaze/ratInAMaze\";\n\nimport PathFinderVisualiser from \"./pathFinderVisualiser/pathfinderVisualiser\";\n\n// Stylesheets\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar />\n                <Route exact path=\"/\" component={IndexTable} />\n                <Route path=\"/sorting\" component={SortingVisualiser} />\n                <Route path=\"/linear-search\" component={LinearSearch} />\n                <Route path=\"/binary-search\" component={BinarySearch} />\n                <Route path=\"/n-queens-problem\" component={NQueensProblem} />\n                <Route path=\"/rat-in-a-maze\" component={RatInAMazeProblem} />\n                <Route path=\"/pathfinder\" component={PathFinderVisualiser} />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}